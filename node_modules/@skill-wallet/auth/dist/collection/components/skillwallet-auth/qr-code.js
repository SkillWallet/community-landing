import { Component, Prop, State, Watch, h } from '@stencil/core';
// NOTE: qrcode is a node NPM JavaScript library.
// credit to :https://www.npmjs.com/package/qr-code-stencil-component
import qrcode from "qrcode-generator";
import { ErrorCorrectionLevel, OutputMode } from './enums';
function appendAttribute(attributeName, attributeValue, nodeAsString) {
  const mutatedNodeAsString = nodeAsString.replace('>', ` ${attributeName}="${attributeValue.replace('"', '\'')}" >`);
  return mutatedNodeAsString;
}
export class QRCodeWebComponent {
  constructor() {
    this.contents = 'Hello World';
    this.errorCorrectionLevel = ErrorCorrectionLevel.High;
    this.margin = 4;
    this.scale = 4;
    this.colorDark = '#000000ff';
    this.colorLight = '#ffffffff';
    //@Prop() qrVersion: number;
    this.outputMode = OutputMode.DataURI;
  }
  componentWillLoad() {
    this.computeAndSetData(this.contents, this.outputMode);
  }
  computeAndSetData(text, outputMode) {
    const qr = qrcode(0, this.errorCorrectionLevel);
    qr.addData(text);
    qr.make();
    if (outputMode === 'DataURI') {
      this.data = qr.createImgTag();
      this.data = appendAttribute('alt', 'QR Code Image for ' + text, this.data);
    }
    else if (outputMode === 'SVG') {
      this.data = qr.createSvgTag();
    }
    else if (outputMode === 'Table') {
      this.data = qr.createTableTag();
    }
    else {
      this.data = null;
    }
  }
  changeOutputModeHandler(newValue) {
    this.computeAndSetData(this.contents, newValue);
  }
  changeContentsHandler(newValue) {
    this.computeAndSetData(newValue, this.outputMode);
  }
  changeErrorCorrectionLevelHandler() {
    this.computeAndSetData(this.contents, this.outputMode);
  }
  render() {
    // see https://github.com/ionic-team/stencil/issues/148
    return h("div", { innerHTML: this.data });
  }
  static get is() { return "qr-code"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["qr-code.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["qr-code.css"]
  }; }
  static get properties() { return {
    "contents": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "contents",
      "reflect": false,
      "defaultValue": "'Hello World'"
    },
    "errorCorrectionLevel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "ErrorCorrectionLevel",
        "resolved": "ErrorCorrectionLevel.High | ErrorCorrectionLevel.Low | ErrorCorrectionLevel.Medium | ErrorCorrectionLevel.Quality",
        "references": {
          "ErrorCorrectionLevel": {
            "location": "import",
            "path": "./enums"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "error-correction-level",
      "reflect": false,
      "defaultValue": "ErrorCorrectionLevel.High"
    },
    "margin": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "margin",
      "reflect": false,
      "defaultValue": "4"
    },
    "scale": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "scale",
      "reflect": false,
      "defaultValue": "4"
    },
    "colorDark": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "color-dark",
      "reflect": false,
      "defaultValue": "'#000000ff'"
    },
    "colorLight": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "color-light",
      "reflect": false,
      "defaultValue": "'#ffffffff'"
    },
    "outputMode": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "OutputMode",
        "resolved": "OutputMode.DataURI | OutputMode.SVG | OutputMode.Table",
        "references": {
          "OutputMode": {
            "location": "import",
            "path": "./enums"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "output-mode",
      "reflect": false,
      "defaultValue": "OutputMode.DataURI"
    }
  }; }
  static get states() { return {
    "data": {}
  }; }
  static get watchers() { return [{
      "propName": "outputMode",
      "methodName": "changeOutputModeHandler"
    }, {
      "propName": "contents",
      "methodName": "changeContentsHandler"
    }, {
      "propName": "errorCorrectionLevel",
      "methodName": "changeErrorCorrectionLevelHandler"
    }]; }
}
