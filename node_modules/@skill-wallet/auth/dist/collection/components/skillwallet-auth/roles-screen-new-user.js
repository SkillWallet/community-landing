import { Component, h, Prop, Listen, Event } from '@stencil/core';
import { joinCommunity } from '../../utils/utils';
export class RolesScreenNewUser {
  updateValue(event) {
    this.skill = parseInt(event.target.value);
  }
  handleChangeEvent() {
    this.slider.addEventListener("change", function () {
    });
  }
  handleRoleClick(role) {
    this.roleSelected = role;
    this.buttonClass = '';
  }
  async handleUserQRClick() {
    this.isLoading = true;
    const tokenId = await joinCommunity(this.community.address, localStorage.getItem('username'), this.roleSelected, this.skill);
    localStorage.setItem('tokenId', tokenId);
    this.showNewScreen.emit('role');
  }
  render() {
    return (h("div", { class: "roles-screen-new-user" },
      this.isLoading ? h("div", { class: "item" },
        h("h2", null, "Loading"),
        h("i", { class: "loader two" })) : h("div", null),
      h("div", { class: "user-role-header" },
        h("h2", null,
          "Your Role in ",
          h("span", { style: { textDecoration: 'underline', fontWeight: 'bold' } }, this.community.name)),
        h("p", null, "Pick what you're the best at & be rewarded for it!")),
      (this.roleSelected) ?
        h("div", null,
          h("div", { class: "role-button-clicked" },
            h("div", null,
              h("div", { class: "filled-in-circle" })),
            h("p", null, this.roleSelected)),
          h("div", { class: "xp-component" },
            h("h3", null,
              "Your ",
              h("u", null, "Commitment Level")),
            h("p", null, "Tell your Community how much time you commit to this Role! \uD83D\uDD10"),
            h("div", { class: "bar-chart-first-container" },
              h("input", { class: "bar-chart-container", type: "range", id: "myRange", value: "1", min: "1", max: "10", onChange: this.updateValue, ref: ele => this.slider = ele }),
              h("div", { class: "bar-chart-metrics" },
                h("p", null, "1"),
                h("p", null, "10"))))) :
        h("div", { class: "role-fields" },
          h("div", { class: "role-button", onClick: () => this.handleRoleClick(this.community.roles[0]) },
            h("div", null,
              h("div", { class: "circle" })),
            h("p", null, this.community.roles[0])),
          h("div", { class: "role-button", onClick: () => this.handleRoleClick(this.community.roles[1]) },
            h("div", null,
              h("div", { class: "circle" })),
            h("p", null, this.community.roles[1])),
          h("div", { class: "role-button", onClick: () => this.handleRoleClick(this.community.roles[2]) },
            h("div", null,
              h("div", { class: "circle" })),
            h("p", null, this.community.roles[2]))),
      h("button", { onClick: () => this.handleUserQRClick(), class: this.buttonClass, disabled: this.isLoading }, "That's it - join this community!")));
  }
  static get is() { return "roles-screen-new-user"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["skillwallet-auth.css"]
  }; }
  static get styleUrls() { return {
    "$": ["skillwallet-auth.css"]
  }; }
  static get properties() { return {
    "roleSelected": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "role-selected",
      "reflect": false
    },
    "isLoading": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "is-loading",
      "reflect": false
    },
    "buttonClass": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "button-class",
      "reflect": false
    },
    "community": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "community",
      "reflect": false
    },
    "isPartner": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "Boolean",
        "resolved": "Boolean",
        "references": {
          "Boolean": {
            "location": "global"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      }
    },
    "skill": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "skill",
      "reflect": false
    }
  }; }
  static get events() { return [{
      "method": "showNewScreen",
      "name": "showNewScreen",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get listeners() { return [{
      "name": "click",
      "method": "handleChangeEvent",
      "target": undefined,
      "capture": true,
      "passive": false
    }]; }
}
