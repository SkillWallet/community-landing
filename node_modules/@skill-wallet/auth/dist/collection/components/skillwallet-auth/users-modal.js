import { Component, h, Event, State, Prop } from '@stencil/core';
import { fetchSkillWallet } from '../../utils/utils';
export class UsersModal {
  constructor() {
    this.isLoading = false;
    this.handleMetamaskClick = async () => {
      this.isLoading = true;
      const { ethereum } = window;
      try {
        await ethereum.request({ method: 'eth_requestAccounts' });
        console.log(ethereum);
        await fetchSkillWallet(ethereum.selectedAddress);
        this.closeModalOnLogin.emit();
      }
      catch (error) {
        this.isLoading = false;
        alert(error);
      }
    };
  }
  handleNewScreen(text) {
    this.showNewScreen.emit(text);
  }
  render() {
    return (h("div", { class: "modal-window-child" },
      this.isLoading ? h("div", { class: "item" },
        h("h2", null, "Loading"),
        h("i", { class: "loader two" })) : h("div", null),
      h("div", { class: "wallet-header" },
        h("auth-image", { image: 'https://skillwallet-demo-images.s3.us-east-2.amazonaws.com/wallet-black.svg' }),
        h("h2", null, this.isPartner ? 'I am a...' : 'Login with')),
      h("div", { class: "wallet-modal-button" },
        h("button", { onClick: () => this.handleMetamaskClick() },
          h("auth-image", null),
          h("p", null, this.isPartner ? 'Existing Partner' : 'SkillWallet')),
        h("button", { onClick: () => this.handleNewScreen(null) },
          h("auth-image", { image: 'https://skillwallet-demo-images.s3.us-east-2.amazonaws.com/plus-button-white.svg' }),
          h("p", null, this.isPartner ? 'New Partner' : 'Create New User')))));
  }
  static get is() { return "users-modal"; }
  static get properties() { return {
    "isPartner": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "Boolean",
        "resolved": "Boolean",
        "references": {
          "Boolean": {
            "location": "global"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      }
    }
  }; }
  static get states() { return {
    "isLoading": {}
  }; }
  static get events() { return [{
      "method": "showNewScreen",
      "name": "showNewScreen",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "closeModalOnLogin",
      "name": "closeModalOnLogin",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
}
