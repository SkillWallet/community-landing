import { Component, h, Prop, Event } from '@stencil/core';
import { joinCommunity, activatePA } from '../../utils/utils';
export class RolesScreenPartner {
  constructor() {
    this.communityAddress = null;
    this.partnersAddress = null;
  }
  handleRoleClick(role) {
    this.roleSelected = role;
    this.buttonClass = '';
  }
  async handleUserQRClick() {
    console.log('button clicked');
    this.isLoading = true;
    const tokenId = await joinCommunity(this.communityAddress, localStorage.getItem('username'), this.roleSelected, 10);
    const active = await activatePA(this.partnersAddress);
    console.log(tokenId, active);
    localStorage.setItem('tokenId', tokenId);
    this.showNewScreen.emit('role');
  }
  render() {
    return (h("div", { class: "roles-screen-partner" },
      this.isLoading ? h("div", { class: "item" },
        h("h2", null, "Loading"),
        h("i", { class: "loader two" })) : h("div", null),
      h("div", { class: "user-role-header" },
        h("p", null, "Pick your Role in your Community - and let it be known for the generations to come!")),
      h("div", { class: "role-fields" },
        h("div", { class: "role-button", onClick: () => this.handleRoleClick('Founder') },
          h("div", null,
            h("div", { class: this.roleSelected === "Founder" ? "filled-in-circle" : "circle" })),
          h("p", null, "Founder")),
        h("div", { class: "role-button", onClick: () => this.handleRoleClick('Contributor') },
          h("div", null,
            h("div", { class: this.roleSelected === "Contributor" ? "filled-in-circle" : "circle" })),
          h("p", null, "Contributor")),
        h("div", { class: "role-button", onClick: () => this.handleRoleClick('Investor') },
          h("div", null,
            h("div", { class: this.roleSelected === "Investor" ? "filled-in-circle" : "circle" })),
          h("p", null, "Investor"))),
      h("button", { onClick: () => this.handleUserQRClick(), class: this.buttonClass, disabled: this.isLoading }, "That's it - join this community!")));
  }
  static get is() { return "roles-screen-partner"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["skillwallet-auth.css"]
  }; }
  static get styleUrls() { return {
    "$": ["skillwallet-auth.css"]
  }; }
  static get properties() { return {
    "roleSelected": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "role-selected",
      "reflect": false
    },
    "isLoading": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "is-loading",
      "reflect": false
    },
    "buttonClass": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "button-class",
      "reflect": false
    },
    "community": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "community",
      "reflect": false
    },
    "isPartner": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "Boolean",
        "resolved": "Boolean",
        "references": {
          "Boolean": {
            "location": "global"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      }
    },
    "communityAddress": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "community-address",
      "reflect": false,
      "defaultValue": "null"
    },
    "partnersAddress": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "partners-address",
      "reflect": false,
      "defaultValue": "null"
    }
  }; }
  static get events() { return [{
      "method": "showNewScreen",
      "name": "showNewScreen",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
}
