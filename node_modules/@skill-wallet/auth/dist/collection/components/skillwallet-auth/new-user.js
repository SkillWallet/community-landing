import { Component, Event, h, State, Prop } from '@stencil/core';
import { changeNetwork } from '../../utils/utils';
export class NewUser {
  constructor() {
    this.isAccountDisconnected = true;
    this.buttonClass = 'disabled';
    this.handleMetamaskClick = async () => {
      await changeNetwork();
      const { ethereum } = window;
      try {
        await ethereum.request({ method: 'eth_requestAccounts' });
        this.isAccountDisconnected = false;
        this.buttonClass = '';
      }
      catch (error) {
        alert(error);
      }
    };
  }
  componentWillLoad() {
    const { ethereum } = window;
    if (ethereum && ethereum.isMetaMask && ethereum.selectedAddress) {
      this.isAccountDisconnected = false;
      this.buttonClass = '';
      return;
    }
  }
  handleUserDetailsClick() {
    this.showUserDetails.emit(true);
  }
  render() {
    return (h("div", { class: "new-user-modal-window-child" },
      h("div", { class: "new-user-header" },
        this.isPartner ? (h("h2", { style: { textDecoration: 'none', fontWeight: '500' } }, "Hello, Partner!")) : (h("h2", null,
          "Welcome to ",
          h("span", { style: { textDecoration: 'underline', fontWeight: 'bold' } }, this.community.name))),
        h("p", null, "First, import your Wallet, or create a brand new account.")),
      h("div", { class: "wallet-modal-button" },
        h("button", { onClick: () => this.handleMetamaskClick(), class: this.isAccountDisconnected ? '' : 'activeSelection' },
          h("auth-image", { image: 'https://skillwallet-demo-images.s3.us-east-2.amazonaws.com/metamask.svg' }),
          h("p", null, "Inject from Metamask")),
        h("button", { class: this.isAccountDisconnected ? '' : 'inactiveSelection' },
          h("auth-image", { image: 'https://skillwallet-demo-images.s3.us-east-2.amazonaws.com/torus-new-user.svg' }),
          h("p", null, "Create New Account"))),
      h("button", { disabled: this.isAccountDisconnected, class: this.buttonClass, onClick: () => this.handleUserDetailsClick() }, "Next: Introduce yourself")));
  }
  static get is() { return "new-user"; }
  static get properties() { return {
    "community": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "community",
      "reflect": false
    },
    "isPartner": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "Boolean",
        "resolved": "Boolean",
        "references": {
          "Boolean": {
            "location": "global"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      }
    }
  }; }
  static get states() { return {
    "isAccountDisconnected": {},
    "buttonClass": {}
  }; }
  static get events() { return [{
      "method": "showUserDetails",
      "name": "showUserDetails",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "Boolean",
        "resolved": "Boolean",
        "references": {
          "Boolean": {
            "location": "global"
          }
        }
      }
    }]; }
}
